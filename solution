// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:

const validateCred = inputArray => {
  const checkedNums = []; //declare an array that will hold the relevant numbers from the inputArray
  const arrayLength = inputArray.length - 1; //declare a variable that refers to the length of the inputArray - 1
  for(let index = inputArray.length - 1; index >= 0; index--) {
    if(index === inputArray.length - 1) { //if the index points to the 'check'
      checkedNums.push(inputArray[index]); //add the 'check' to the checkedNums array
    } else if ((arrayLength - index) % 2 == 0){ //otherwise, if the result of (arrayLength - index)/2 results in 0 remainder
      checkedNums.push(inputArray[index]); //add the number that does not require mathematical operations performed upon it to the checkedNums array
    } else { //the result of (arrayLength - index)/2 results in a remainder, thus mathematical operations are required upon this number
      let modifiedNum = inputArray[index] * 2; //let the modifiedNum variable refer to (the value in the inputArray pointed to by index) multiplied by 2
      if(modifiedNum > 9) { //if modifiedNum is greater than 9...
        modifiedNum -= 9; //...subtract 9 from its value
      }
      checkedNums.push(modifiedNum); //add modifiedNum to the checkedNums array
    }
  }// end the for loop
  //console.log(checkedNums); used for debugging
  return modulo10(checkedNums);
}

const modulo10 = checkedNums => {
  let sum = 0;
  for(let index = 0; index < checkedNums.length; index++) {
    sum += checkedNums[index];
  }
  //console.log("Sum: " + sum); //used for debugging
  return sum % 10 === 0? true:false;
};

console.log(validateCred(valid1)); //Expect true; all the 'valid'-prefixed arrays return true
console.log(validateCred(invalid5)); //Expect false; all the 'invalid'-prefixed arrays return false

const findInvalidCards = nestedArray => {
  const invalidCards = nestedArray.filter(function(element) {
    return validateCred(element) === false;
  });
  return invalidCards;
};

console.log(findInvalidCards(batch)); //Returns all 'invalid'-prefixed cards, plus mystery1, mystery3, and mystery4

const idInvalidCardCompanies = nestedArray => {
  const invalidCards = findInvalidCards(nestedArray);
  const companies = [];
  for(let index = 0; index < invalidCards.length; index++) {
    if((invalidCards[index][0] != 3) && (invalidCards[index][0] != 4) && (invalidCards[index][0] != 5) && (invalidCards[index][0] != 6)) {
      console.log("Company not found");
    } 
    if(invalidCards[index][0] === 3 && !companies.includes("Amex (American Express)")) {
      companies.push("Amex (American Express)");
    } else if(invalidCards[index][0] === 4 && !companies.includes("Visa")) {
      companies.push("Visa");
    } else if(invalidCards[index][0] === 5 && !companies.includes("Mastercard")) {
      companies.push("Mastercard");
    } else if(invalidCards[index][0] === 6 && !companies.includes("Discover")) {
      companies.push("Discover");
    } 
  }
  return companies;
}

console.log(idInvalidCardCompanies(batch)); //correctly prints out an array of non-repeated company names in the order 'Visa', 'Mastercard', 'Amex (American Express)', 'Discover' as expected

const stringToNumbers = string => {
  string = string.replace(' ', ''); //remove whitespace from the input string
  const characters = string.split(''); //split string into an array of characters
  const numbers = []; //declare a number array
  for(let index = 0; index < characters.length; index++) { //for as long as there are elements in the characters array
    numbers.push(parseInt(characters[index])); //add the integer representation of the current character element to the numbers array
  }
  return numbers; //return the numbers array
}

// console.log(stringToNumbers("4532778771091795")); correctly logs an array of numbers

const invalidToValid = inputArray => {
  let checkedNums = []; //declare an array that will hold the relevant numbers from the inputArray
  const arrayLength = inputArray.length - 1; //declare a variable that refers to the length of the inputArray - 1
  for(let index = inputArray.length - 1; index >= 0; index--) {
    if(index === inputArray.length - 1) { //if the index points to the 'check'
      checkedNums.push(inputArray[index]); //add the 'check' to the checkedNums array
    } else if ((arrayLength - index) % 2 == 0){ //otherwise, if the result of (arrayLength - index)/2 results in 0 remainder
      checkedNums.push(inputArray[index]); //add the number that does not require mathematical operations performed upon it to the checkedNums array
    } else { //the result of (arrayLength - index)/2 results in a remainder, thus mathematical operations are required upon this number
      let modifiedNum = inputArray[index] * 2; //let the modifiedNum variable refer to (the value in the inputArray pointed to by index) multiplied by 2
      if(modifiedNum > 9) { //if modifiedNum is greater than 9...
        modifiedNum -= 9; //...subtract 9 from its value
      }
      checkedNums.push(modifiedNum); //add modifiedNum to the checkedNums array
    }
  }
  checkedNums.reverse(); //reverse the elements in the checkedNums array so that they match the order of the inputArray and the correct 'check' variable is replaced 
  inputArray[inputArray.length - 1] = calculateNewCheck(checkedNums); //return an array that has a validity-ensuring new 'check' number
  console.log(inputArray); //proves that only the 'check' digit has been replaced from the original credit card number
  return inputArray;
};  

const calculateNewCheck = checkedNums => { //function to calculate a new 'check' number that will guarantee that the card number is valid
  let invalidNumber = 0; //initialize an invalidNumber variable equal to 0
  for(let index = 0; index < checkedNums.length - 1; index++) { //for the length of the checkedNums array minus 1, ie ignoring the 'check' digit
    invalidNumber += checkedNums[index]; //add the value of each checkedNums element to the invalidNumber
  }
  let newCheck = 10 - (invalidNumber % 10); //initialize a newCheck variable equal to the result of 10 - (the remainder of dividing invalidNumber by 10)
  newCheck = newCheck === 10? 0:newCheck; //if newCheck is equal to 10, assign newCheck the value of 0; otherwise leave newCheck unchanged
  return newCheck; //return the value of the calculated newCheck variable
};

//the following calls to console.log print false, as expected
console.log(validateCred(invalid1));
console.log(validateCred(invalid2));
console.log(validateCred(invalid3));
console.log(validateCred(invalid4));
console.log(validateCred(invalid5));
//convert the invalid numbers to valid numbers
const noLongerInvalid1 = invalidToValid(invalid1);
const noLongerInvalid2 = invalidToValid(invalid2);
const noLongerInvalid3 = invalidToValid(invalid3);
const noLongerInvalid4 = invalidToValid(invalid4);
const noLongerInvalid5 = invalidToValid(invalid5);
//the following calls to console.log print true, as expected
console.log(validateCred(noLongerInvalid1));
console.log(validateCred(noLongerInvalid2));
console.log(validateCred(noLongerInvalid3));
console.log(validateCred(noLongerInvalid4));
console.log(validateCred(noLongerInvalid5));


